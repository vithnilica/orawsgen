{{$service := .}}

package {{$service.JavaPackage}};


import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.annotation.Resource.AuthenticationType;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.sql.DataSource;
//import javax.servlet.annotation.WebServlet;
import javax.xml.bind.annotation.*;

import orawsgen.*;

@WebService(
        serviceName = "{{$service.AppName}}_Service",
        portName = "HttpSoap11",
        targetNamespace = "{{$service.WsdlNameSpace}}",
        name = "{{$service.WsdlPortTypeName}}"
)
//@XmlSeeAlso({TestWSParams.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public class GeneratedWSA{
	private static final Logger LOG = Logger.getLogger(GeneratedWSA.class.getName());

	javax.sql.DataSource ds;

	@Resource(lookup = "{{$service.JavaDS}}")
	private void setDs (javax.sql.DataSource ds) {
		this.ds = ds;
	}


	private java.sql.Connection getDbCon() throws java.sql.SQLException {
		java.sql.Connection con=ds.getConnection();
		con.setAutoCommit(false);
		return con;
	}


{{range $methodIdx, $method := .Methods}}
	@WebMethod(operationName="{{$method.WsdlMethodName}}", action = "{{$service.WsdlNameSpace}}/{{$method.WsdlMethodName}}")
	@WebResult(name = "{{$method.WsdlMethodName}}ResponseElement", targetNamespace = "{{$service.WsdlNameSpace}}", partName = "parameters")
	public {{$method.JavaWSClassName}}ResponseElement {{$method.JavaWSMethodName}}(
			@WebParam(partName = "parameters", name = "{{$method.WsdlMethodName}}Element", targetNamespace = "{{$service.WsdlNameSpace}}")
			{{$method.JavaWSClassName}}Element parameters
	) {
		LOG.info("start {{$method.JavaWSMethodName}}");

		{{$method.JavaWSClassName}}ResponseElement response = new {{$method.JavaWSClassName}}ResponseElement();
		{{if $method.HasOutputParam}}
			response.result=new {{$method.JavaWSClassName}}ResponseElementOut();
		{{end}}

		try (java.sql.Connection con = getDbCon(); java.sql.CallableStatement cs = con.prepareCall("{{$method.JdbcStmt}}");) {
			{{if $method.IsFunction}}
			//registrace vystupu funkce
			{{(index $service.DataTypeMap $method.ResultDataTypeId).JdbcRegOutParamMethod}}(con, cs, "ret");
			{{end}}

			{{range $paramIdx,$param:=.Params}}
			{{if $param.IsOut}}
			//registrace out parametru
			{{(index $service.DataTypeMap $param.DataTypeId).JdbcRegOutParamMethod}}(con, cs, "{{$param.JdbcStmtParam}}");
			{{end}}

            {{if $param.IsIn}}
			//nastaveni in parametru
			{{(index $service.DataTypeMap $param.DataTypeId).JdbcSetParamMethod}}(con, cs, "{{$param.JdbcStmtParam}}", parameters.{{$param.JavaParamName}});
			{{end}}
			{{end}}

			cs.execute();
			con.commit();


			{{if $method.IsFunction}}
			//precteni vystupu funkce
			{{if $method.HasOutputParam}}
			response.result.ret={{(index $service.DataTypeMap $method.ResultDataTypeId).JdbcGetOutParamMethod}}(con, cs, "ret");
			{{else}}
			response.result={{(index $service.DataTypeMap $method.ResultDataTypeId).JdbcGetOutParamMethod}}(con, cs, "ret");
			{{end}}
			{{end}}


			{{if $method.HasOutputParam}}
			//precteni vystupnich parametru
			{{range $paramIdx,$param:=.Params}}{{if $param.IsOut}}
			response.result.{{$param.JavaParamName}}={{(index $service.DataTypeMap $param.DataTypeId).JdbcGetOutParamMethod}}(con, cs, "{{$param.JdbcStmtParam}}");
			{{end}}{{end}}
			{{end}}

		} catch (Exception e) {
			LOG.log(Level.SEVERE,"err {{$method.JavaWSMethodName}}", e);
			throw new RuntimeException(e);
		}

		LOG.info("end {{$method.JavaWSMethodName}}");
		return response;
	}

	{{if $method.HasInputParam}}
		//vstupni parametry
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = {
			{{$service.SetTemplateVariable "paramFirst" true}}
			{{range $paramIdx,$param:=.Params}}{{if $param.IsIn}}{{if $service.GetTemplateVariable "paramFirst"}}{{$service.SetTemplateVariable "paramFirst" false}}{{else}}, {{end}}"{{$param.JavaParamName}}"{{end}}{{end}}
		})
		@XmlRootElement(name = "{{$method.WsdlMethodName}}Element")
		public static class {{$method.JavaWSClassName}}Element {
			{{range $paramIdx,$param:=.Params}}{{if $param.IsIn}}
				{{if $param.IsOut}}
				//inout parametr
				@XmlElement(name="{{$param.WsdlParamName}}_inout",required = true, nillable = true)
				{{else}}
				//in parametr
				@XmlElement(name="{{$param.WsdlParamName}}",required = true, nillable = true)
				{{end}}
				public {{(index $service.DataTypeMap $param.DataTypeId).JavaClass}} {{$param.JavaParamName}};
			{{end}}{{end}}
		}
	{{else}}
		//bez vstupnich parametru
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "")
		@XmlRootElement(name = "{{$method.WsdlMethodName}}Element")
		public static class {{$method.JavaWSClassName}}Element {
		}

	{{end}}


	{{if $method.HasOutputParam}}
	//metoda s out parametrama
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "{{$method.WsdlPkgName}}User_{{$method.WsdlMethodName}}_Out", propOrder = {
			{{range $opi,$op:=$method.JavaWSAOutParams}}{{if ne 0 $opi}},{{end}}"{{$op}}"{{end}}
		})
		public static class {{$method.JavaWSClassName}}ResponseElementOut {
			{{if $method.IsFunction}}
			//navratova hodnota funkce
			{{if HasPrefix $method.ResultDataTypeId "generated:list:"}}
			@XmlElement(name="return", nillable = true)
			{{else}}
			@XmlElement(name="return", required = true, nillable = true)
			{{end}}
			public {{(index $service.DataTypeMap $method.ResultDataTypeId).JavaClass}} ret;
	        {{end}}
			{{range $paramIdx,$param:=.Params}}{{if $param.IsOut}}
			{{if HasPrefix $param.DataTypeId "generated:list:"}}
			@XmlElement(name="{{$param.WsdlOutParamName}}", nillable = true)
			{{else}}
			@XmlElement(name="{{$param.WsdlOutParamName}}", required = true, nillable = true)
			{{end}}
			public {{(index $service.DataTypeMap $param.DataTypeId).JavaClass}} {{$param.JavaParamName}};
			{{end}}{{end}}
		}

		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = {
			"result"
		})
		@XmlRootElement(name = "{{$method.WsdlMethodName}}ResponseElement")
		public static class {{$method.JavaWSClassName}}ResponseElement {
			@XmlElement(name="result", required = true, nillable = true)
			public {{$method.JavaWSClassName}}ResponseElementOut result;
		}

	{{else if $method.IsFunction}}
		//navratova hodnota funkce
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = {
			"result"
		})
		@XmlRootElement(name = "{{$method.WsdlMethodName}}ResponseElement")
		public static class {{$method.JavaWSClassName}}ResponseElement {
			@XmlElement(name="result", required = true, nillable = true)
			public {{(index $service.DataTypeMap $method.ResultDataTypeId).JavaClass}} result;
		}
	{{else}}
		//metoda ktera nic nevraci
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "")
		@XmlRootElement(name = "{{$method.WsdlMethodName}}ResponseElement")
		public static class {{$method.JavaWSClassName}}ResponseElement {
		}
	{{end}}
{{end}}

}
